function [f C] = GPR_1D_basis_functions()
% %Choose kernel
% kern = 1
% switch kern
%     case 1
% end
k = @(x,y) exp(-100*(x-y)'*(x-y));

addpath('..'); %to add basis functions in higher folder

%Choose sample
%x = linspace(0,10,200);

%x = x(r);
xprev = [0:.005:.995];
% r = randperm(length(xprev)); %inputted random permutation
%r = [6 3 16 11 7 17 14 8 5 19 15 1 2 4 18 13 9 20 10 12]; %fixed permutation for consistency of analysis (but not noise)
%x = [0.770000000000000,0.365000000000000,0.425000000000000,0.710000000000000,0.230000000000000,0.865000000000000,0.500000000000000,0.445000000000000,0.390000000000000,0.380000000000000,0.285000000000000,0.305000000000000,0.205000000000000,0.175000000000000,0.315000000000000,0.785000000000000,0.875000000000000,0.540000000000000,0.265000000000000,0.715000000000000,0.505000000000000,0.910000000000000,0.620000000000000,0.900000000000000,0.220000000000000,0,0.165000000000000,0.945000000000000,0.625000000000000,0.350000000000000,0.490000000000000,0.610000000000000,0.630000000000000,0.535000000000000,0.130000000000000,0.370000000000000,0.225000000000000,0.270000000000000,0.850000000000000,0.115000000000000,0.755000000000000,0.475000000000000,0.180000000000000,0.565000000000000,0.250000000000000,0.0800000000000000,0.855000000000000,0.140000000000000,0.0950000000000000,0.0200000000000000,0.0600000000000000,0.585000000000000,0.470000000000000,0.0900000000000000,0.0850000000000000,0.675000000000000,0.375000000000000,0.685000000000000,0.995000000000000,0.0500000000000000,0.325000000000000,0.0750000000000000,0.190000000000000,0.405000000000000,0.905000000000000,0.415000000000000,0.320000000000000,0.700000000000000,0.150000000000000,0.815000000000000,0.940000000000000,0.160000000000000,0.670000000000000,0.0450000000000000,0.275000000000000,0.920000000000000,0.290000000000000,0.0300000000000000,0.480000000000000,0.435000000000000,0.950000000000000,0.440000000000000,0.955000000000000,0.935000000000000,0.0100000000000000,0.0400000000000000,0.860000000000000,0.145000000000000,0.195000000000000,0.580000000000000,0.100000000000000,0.495000000000000,0.880000000000000,0.780000000000000,0.830000000000000,0.155000000000000,0.895000000000000,0.790000000000000,0.645000000000000,0.760000000000000,0.990000000000000,0.845000000000000,0.590000000000000,0.400000000000000,0.0350000000000000,0.930000000000000,0.640000000000000,0.960000000000000,0.665000000000000,0.260000000000000,0.695000000000000,0.185000000000000,0.395000000000000,0.340000000000000,0.980000000000000,0.635000000000000,0.835000000000000,0.655000000000000,0.360000000000000,0.885000000000000,0.455000000000000,0.775000000000000,0.430000000000000,0.0150000000000000,0.235000000000000,0.410000000000000,0.200000000000000,0.335000000000000,0.890000000000000,0.705000000000000,0.110000000000000,0.800000000000000,0.555000000000000,0.530000000000000,0.295000000000000,0.925000000000000,0.840000000000000,0.0250000000000000,0.660000000000000,0.595000000000000,0.170000000000000,0.740000000000000,0.385000000000000,0.450000000000000,0.970000000000000,0.750000000000000,0.615000000000000,0.240000000000000,0.510000000000000,0.485000000000000,0.560000000000000,0.915000000000000,0.345000000000000,0.805000000000000,0.550000000000000,0.820000000000000,0.870000000000000,0.245000000000000,0.460000000000000,0.0550000000000000,0.745000000000000,0.545000000000000,0.765000000000000,0.690000000000000,0.310000000000000,0.465000000000000,0.570000000000000,0.965000000000000,0.650000000000000,0.515000000000000,0.120000000000000,0.105000000000000,0.300000000000000,0.730000000000000,0.795000000000000,0.975000000000000,0.600000000000000,0.135000000000000,0.985000000000000,0.215000000000000,0.825000000000000,0.280000000000000,0.355000000000000,0.210000000000000,0.725000000000000,0.520000000000000,0.525000000000000,0.330000000000000,0.735000000000000,0.420000000000000,0.720000000000000,0.0700000000000000,0.00500000000000000,0.810000000000000,0.605000000000000,0.0650000000000000,0.255000000000000,0.680000000000000,0.575000000000000,0.125000000000000];
%x = xprev;
r = [155,74,86,143,47,174,101,90,79,77,58,62,42,36,64,158,176,109,54,144,102,183,125,181,45,1,34,190,126,71,99,123,127,108,27,75,46,55,171,24,152,96,37,114,51,17,172,29,20,5,13,118,95,19,18,136,76,138,200,11,66,16,39,82,182,84,65,141,31,164,189,33,135,10,56,185,59,7,97,88,191,89,192,188,3,9,173,30,40,117,21,100,177,157,167,32,180,159,130,153,199,170,119,81,8,187,129,193,134,53,140,38,80,69,197,128,168,132,73,178,92,156,87,4,48,83,41,68,179,142,23,161,112,107,60,186,169,6,133,120,35,149,78,91,195,151,124,49,103,98,113,184,70,162,111,165,175,50,93,12,150,110,154,139,63,94,115,194,131,104,25,22,61,147,160,196,121,28,198,44,166,57,72,43,146,105,106,67,148,85,145,15,2,163,122,14,52,137,116,26];
x = xprev(r);
n = length(x);                      %size of total
l = floor(n*2/3);                   %size of training set
freq = 40;                          %frequency for underlying function
amp = 3;                            %amplitude for underlying function

traininds = [1:l];                  %indicies for different parts of data
testinds = [l+1:n];
testinds = [traininds testinds]; %to test over the whole distribution



%Htr = pseudo_kern_trick(x(traininds)')';    %generate basis functions for
%training dataset
%Ho = pseudo_kern_trick(x(testinds)')';      %generate basis functions for
%testing dataset
%Htr = amp*sin(freq*x(traininds)'.^.35)';   %trig expansion for training data
%Ho = amp*sin(freq*x(testinds)'.^.35)';     %trig expansion for testing
Htr = trig_basis([x(traininds)' pseudo_kern_trick(x(traininds)')])';                   %linear basis for training data
Ho = trig_basis([x(testinds)' pseudo_kern_trick(x(testinds)')])';                     %linear basis for testing
H_comb = Ho;
n_basis = size(H_comb,1);                   %number of basis functions
ftr = amp*sin(freq*x(traininds).^.35)';     %training function - real underlying
%ftr = (1/3).*traininds';                    %training function - real underlying
noise = randn(length(x(traininds)),1);      %gaussian noise
ytr = ftr + 1*noise;                        %training output w/ noise

%Construct covariance matrix
C = zeros(n,n);
for i = 1:n
    for j = 1:n
        C(i,j) = k(x(i),x(j));
    end
end
% ytr = mvnrnd(zeros(l,1),C(1:l,1:l)+.1*eye(l))'; %training output - used for confirmation of correct modeling of sampling from prior 
beta = zeros(size(H_comb)); %initialize coefficients of the basis functions, if we want to know what g(x) really is
B = eye(n_basis); %covariance of beta distribution
b = ones(n_basis,1); %mean of beta distribution

Kxx = C(traininds,traininds) + 1*eye(length(C(traininds,traininds)));   %add noise to training dataset
Kxox = C(testinds,traininds);
Kxxo = C(traininds,testinds);
Kxoxo = C(testinds,testinds); %Breakup covariance matrix into blocks

%calculate mean function
mean_fo = mean(x(testinds)) + Kxox*inv(Kxx)*(ytr-mean(x(traininds)));
cov_fo = Kxoxo - Kxox*inv(Kxx)*Kxxo;
R = Ho - Htr*inv(Kxx)*Kxxo;
mean_beta = inv(inv(B) + Htr*inv(Kxx)*Htr')*(Htr*inv(Kxx)*ytr+inv(B)*b); 
mean_go = mean_fo + R'*mean_beta; 
cov_go = cov_fo + R'*inv(inv(B)+Htr*inv(Kxx)*Htr')*R; 

%Joint Posterior Distribution Computations
mu_all = C(:,1:l)*inv(Kxx)*ytr;
%mu_all_basis_fxn = C(:,1:l)*inv(Kxx)*ytr;
mu = mean_go;
% mu = Kxox*inv(Kxx)*ytr;         %New mean
D = Kxoxo - Kxox*inv(Kxx)*Kxxo; %New Covariance
D_all = C - C(:,1:l)*inv(Kxx)*C(1:l,:);

% f = mvnrnd(mu,D,1);
%Sample from Gaussian Process at points
%u = randn(n-l,1);               %sample from normal disctribution
%[A,S,B] = svd(D);               %factor C
%f = A*sqrt(S)*u;                %resulting output

%Plot
%figure;
hold all;
%clf;
plot(x(traininds),ftr,'ro');
plot(x(traininds),ytr,'o');
plot(x,mu_all,'m.');
plot(x(testinds),mu,'co');
plot(xprev,amp*sin(freq*xprev'.^.35),'k-');
%plot(xprev',(200/3).*xprev','k-');

%Note: labels unsure
legend('train without noise','train with noise','post mean w/o basis fcn','mean w/ basis fxn','training function');
% plot(repmat(x(l+1:end)',[1 size(f,1)])',f,'.');
%axis([0,1,-2,2]);
end